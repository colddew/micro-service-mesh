pipeline {

    agent any

    environment {
        ALIYUN_REGISTRY_CRED = credentials('aliyun-registry')
        ALIYUN_REGISTRY_HOST = 'registry.cn-hangzhou.aliyuncs.com'
    }

    stages {
        stage('prepare') {
            steps {
                echo 'prepare...'
                deleteDir()
                script {
//                     env.GIT_COMMIT_ID = sh (script: 'git rev-parse --short HEAD ${GIT_COMMIT}', returnStdout: true).trim()
                    env.GIT_COMMIT_ID = sh(script: 'git describe --tags --always', returnStdout: true).trim()
//                     env.GIT_COMMIT_ID = "${GIT_COMMIT}".substring(0, 7).trim()
                }
                sh 'printenv'
            }
        }

        stage('project build & test') {
            agent {
                docker {
                    image 'maven:3.8.4-jdk-8'
                    args '-v /Users/anmy/.m2/:/root/.m2'
                }
            }
            steps {
                echo 'project build...'
//                 sh 'mvn -Pk8s clean test'
//                 sh 'mvn -Pk8s clean package -Dmaven.test.skip=true'
                sh 'mvn -Pk8s clean package test'
                stash excludes: '**/build/**', includes: '**', name: 'source'
            }
        }

        stage('docker build') {
            steps {
                unstash 'source'
                echo 'docker build...'
                dir("${WORKSPACE}/micro-service-server3") {
                    sh "docker build -t ${ALIYUN_REGISTRY_HOST}/plantlink/micro-service-server3:${env.BUILD_NUMBER} ."
                    sh "docker login -u ${ALIYUN_REGISTRY_CRED_USR} -p ${ALIYUN_REGISTRY_CRED_PSW} ${ALIYUN_REGISTRY_HOST}"
                    sh "docker push ${ALIYUN_REGISTRY_HOST}/plantlink/micro-service-server3:${env.BUILD_NUMBER}"
                    sh "docker rmi ${ALIYUN_REGISTRY_HOST}/plantlink/micro-service-server3:${env.BUILD_NUMBER}"
                }
            }
        }

        stage('k8s deploy') {
            steps {
                echo 'k8s deploy...'
                sh 'kubectl version'
                // trigger dingtalk notification
                input "Does the k8s environment look ok?"
                // sh "docker run -d -p 8013:8013 -e 'SPRING_PROFILES_ACTIVE=k8s' --name server3 ${ALIYUN_REGISTRY_HOST}/plantlink/micro-service-server3:${env.BUILD_NUMBER}"
                dir("${WORKSPACE}/micro-service-server3") {
                    withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: 'kubernetes-admin-c70090b0f556944bf841e9d2d2134b355', credentialsId: 'devops-release-config', namespace: '', serverUrl: 'https://{k8s-release-ip}:6443') {
                        sh 'sed -i "s/{TAG}/${GIT_COMMIT_ID}/g" deployment.yaml'
                        sh 'cat deployment.yaml'
                        sh 'kubectl apply -f deployment.yaml'
                        sh 'kubectl apply -f service.yaml'
                    }

                    withKubeConfig([credentialsId: 'kubernetes-config']) {
                        sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'
                        sh 'chmod u+x ./kubectl'
                        sh './kubectl get pods'
                    }
                }
            }
        }
    }

    post {
        always {
            deleteDir()
        }
    }
}